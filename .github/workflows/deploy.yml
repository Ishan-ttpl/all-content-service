name: Deploy or Rollback All-Content-Service

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
          - deploy
          - rollback
      environment:
        description: 'Target environment'
        required: true
        default: 'tn-staging'
        type: choice
        options:
          - tn-staging
      branch:
        description: 'Branch to deploy (only for "deploy" action)'
        required: false
        default: 'lais-v2.0'
      rollback_tag:
        description: 'Tag to rollback to (only for "rollback" action, e.g., deploy-tn-staging-v1.0.0)'
        required: false

jobs:
  deploy-or-rollback:
    runs-on: ubuntu-latest
    environment: tn-staging

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ github.event.inputs.branch }}

    - name: Locate deploy.sh
      id: locate_deploy
      run: |
        DEPLOY_PATH=$(find "$GITHUB_WORKSPACE" -name deploy.sh -type f -print -quit)
        if [ -z "$DEPLOY_PATH" ]; then
          echo "::error::deploy.sh not found anywhere in workspace!"
          echo "Searching in: $GITHUB_WORKSPACE"
          echo "Directory contents:"
          ls -laR "$GITHUB_WORKSPACE"
          exit 1
        fi

        echo "Found deploy.sh at: $DEPLOY_PATH"
        echo "DEPLOY_SH_PATH=$DEPLOY_PATH" >> $GITHUB_ENV

    - name: Set SSH Key and Target Host
      run: |
        echo "${{ secrets.SSH_KEY }}" > key.pem
        echo "${{ secrets.SSH_KEY }}" > jump_key.pem
        chmod 600 key.pem jump_key.pem
        echo "host=${{ secrets.TN_STAGING_HOST }}" >> "$GITHUB_ENV"
        echo "target_dir=/home/all-staging-user/all-services/all-content-deploy" >> "$GITHUB_ENV"
        echo "jump_host=${{ secrets.JUMPHOST }}" >> "$GITHUB_ENV"

    - name: Perform Deploy or Rollback
      run: |
        ACTION="${{ github.event.inputs.action }}"
        HOST="${{ env.host }}"
        TARGET_DIR="${{ env.target_dir }}"
        JUMP_HOST="${{ env.jump_host }}"
        DEPLOY_SH_PATH="${{ env.DEPLOY_SH_PATH }}"

        echo "Using deploy.sh at: $DEPLOY_SH_PATH"
        [ -f "$DEPLOY_SH_PATH" ] || { echo "::error::deploy.sh not found at $DEPLOY_SH_PATH"; exit 1; }

        SSH_COMMAND="ssh -o StrictHostKeyChecking=no -i jump_key.pem -J $JUMP_HOST -i key.pem $HOST"
        SCP_COMMAND="scp -o StrictHostKeyChecking=no -i jump_key.pem -o ProxyJump=$JUMP_HOST -i key.pem"

        if [[ "$ACTION" == "deploy" ]]; then
          BRANCH="${{ github.event.inputs.branch }}"
          echo "Initiating deployment to $HOST from branch: $BRANCH"
          $SCP_COMMAND "$DEPLOY_SH_PATH" $HOST:/home/all-staging-user/deploy.sh
          $SSH_COMMAND "chmod +x /home/all-staging-user/deploy.sh && /home/all-staging-user/deploy.sh $TARGET_DIR $BRANCH deploy"

        elif [[ "$ACTION" == "rollback" ]]; then
          ROLLBACK_TAG="${{ github.event.inputs.rollback_tag }}"
          if [[ -z "$ROLLBACK_TAG" ]]; then
            echo "::error::Rollback tag is required for rollback action."
            exit 1
          fi
          echo "Initiating rollback to tag: $ROLLBACK_TAG on $HOST"
          $SCP_COMMAND "$DEPLOY_SH_PATH" $HOST:/home/all-staging-user/deploy.sh
          $SSH_COMMAND "chmod +x /home/all-staging-user/deploy.sh && /home/all-staging-user/deploy.sh $TARGET_DIR $ROLLBACK_TAG rollback"

        else
          echo "::error::Invalid action specified: $ACTION"
          exit 1
        fi
